{"version":3,"sources":["components/Title.js","components/RoverDataImage.js","components/RoverData.js","components/Rover.js","App.js","reportWebVitals.js","index.js"],"names":["Title","Container","fluid","className","this","props","title","subtitle","React","Component","RoverDataImage","state","error","isLoaded","photos","handleClick","bind","url","roverName","BASE_URL","solValue","fetch","then","res","json","result","setState","message","Carousel","map","photo","CarouselItem","href","img_src","target","rel","Image","src","CarouselCaption","earth_date","camera","name","full_name","RoverData","items","value","submitted","handleChange","handleSubmit","event","preventDefault","selectRover","photo_manifest","landing_date","launch_date","status","total_photos","max_date","max_sol","onSubmit","type","onChange","Rover","data","toLowerCase","rovers","rover","index","Button","variant","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a56417a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/w3.css'\nimport Container from 'react-bootstrap/Container'\n\nexport default class Title extends React.Component {\n  render () {\n    return (\n      <Container fluid className=\"w3-mobile\">\n        <div className='w3-teal w3-center w3-animate-top w3-padding-32'>\n          <h1 className={'w3-center w3-jumbo'}>{this.props.title}</h1>\n          <h2 className={'w3-center'}>{this.props.subtitle}</h2>\n        </div>\n      </Container>\n    )\n  }\n}\n\nTitle.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string\n}\n","import React from 'react'\nimport Carousel from 'react-bootstrap/Carousel'\nimport CarouselItem from 'react-bootstrap/esm/CarouselItem'\nimport CarouselCaption from 'react-bootstrap/esm/CarouselCaption'\nimport '../css/w3.css'\nimport Image from 'react-bootstrap/Image'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../css/RoverDataImage.css'\n\nexport default class RoverDataImage extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            error: null,\n            isLoaded: false,\n            photos: []\n        }\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    handleClick () {\n        // this.props.selectRover(this.props.rover)\n\n    }\n\n    componentDidMount () {\n        const BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/rovers/'\n        const API_KEY = 'XAWxBohE3aseeg93CbssMc8e7ckcLD7VvxOKgUBY'\n        const url = BASE_URL + this.props.roverName + '/photos?api_key=' + API_KEY + '&sol=' + this.props.solValue\n        fetch(url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        photos: result.photos\n                    })\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    })\n                }\n            )\n    }\n\n    render () {\n        const { error, isLoaded, photos } = this.state\n        if (error) {\n            return <div>Error: {error.message}</div>\n        } else if (!isLoaded) {\n            return <div>Loading...</div>\n        } else {\n            return (\n                <div className=\"w3-mobile w3-grey\">\n                    <Carousel>\n                        {photos.map(photo => (\n                            <CarouselItem>\n                                <a href={photo.img_src} target=\"_blank\" rel=\"noreferrer\">\n                                    <Image className={\"w3-image image-css\"} src={photo.img_src} fluid />\n                                </a>\n                                <CarouselCaption>\n                                    <h3>{photo.earth_date}</h3>\n                                    <h4>{photo.camera.name + \" (\" + photo.camera.full_name + \")\"} </h4>\n                                </CarouselCaption>\n                            </CarouselItem>\n                        ))}\n                    </Carousel>\n                </div>\n                \n            )\n                        \n        }\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport RoverDataImage from './RoverDataImage'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class RoverData extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n        error: null,\n        isLoaded: false,\n        items: [],\n        value: '',\n        submitted: false,\n        // selectRover: this.props.selectRover\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n    handleChange (event) {\n        this.setState({value: event.target.value})\n    }\n\n    handleSubmit (event) {\n        event.preventDefault()\n        this.setState({submitted: true})\n    }\n\n    componentDidMount () {\n        const BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/manifests/'\n        const API_KEY = 'XAWxBohE3aseeg93CbssMc8e7ckcLD7VvxOKgUBY'\n        const url = BASE_URL + this.props.selectRover + '?api_key=' + API_KEY\n        // this.setState({selectRover: this.props.selectRover})\n        fetch(url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result.photo_manifest\n                    })\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    })\n                }\n            )\n    }\n\n    render () {\n        const { error, isLoaded, items } = this.state\n        if (error) {\n            return <div>Error: {error.message}</div>\n        } else if (!isLoaded) {\n            return <div>\n                Loading...\n                   </div>\n        } else {\n            return (\n                <div className=\"w3-container w3-mobile w3-animate-opacity\">  \n                    \n                    {this.state.submitted ? <div></div> :         \n                    <div><h2>{items.name}</h2>\n                    <p><strong>Landing Date: </strong>{items.landing_date}</p>\n                    <p><strong>Launch Date: </strong>{items.launch_date}</p>\n                    <p><strong>Status: </strong>{items.status}</p>\n                    <p><strong>Total Photos: </strong>{items.total_photos}</p>\n                    <p><strong>Max Date: </strong>{items.max_date}</p>\n                    <p><strong>Max Sol: </strong>{items.max_sol}</p>\n                    </div>}\n\n                    <div className=\"w3-container w3-mobile w3-margin w3-animate-bottom\">\n                        {this.state.submitted ? <RoverDataImage roverName={this.props.selectRover} solValue={this.state.value} /> :                     \n                        <form onSubmit={this.handleSubmit}>\n                            <label>\n                                Enter Sol:\n                                <input type=\"number\" value={this.state.value} onChange={this.handleChange} name=\"enteredSol\" />\n                            </label>\n                            <input type=\"submit\" value=\"Submit\"/>\n                        </form>\n                        }\n                    </div>\n                \n                </div>\n            )\n        }\n    }\n\n}\n\nRoverData.propTypes = {\n  roverName: PropTypes.string\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Container from 'react-bootstrap/Container'\nimport RoverData from './RoverData'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class Rover extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selectRover: '',\n      data: []\n    }\n  }\n\n  onClick (roverName) {\n    this.setState({\n      selectRover: roverName.toLowerCase()\n    })\n  }\n\n  render () {\n    return (\n            <Container>\n                <div className=\"w3-center w3-animate-bottom w3-mobile\">\n                    {this.state.selectRover === '' ? \n                    <div>\n                        <h3 className=\"w3-margin\">Select a Rover </h3>\n                        {\n                                this.props.rovers.map((rover, index) => \n                                {\n                                    return (\n                                        <Button key={index} variant=\"primary\" className=\"w3-margin\" onClick={() => this.onClick(rover)}>{rover}</Button>\n                                    )\n                                }\n                            )\n                        }\n                    </div>\n                    : \n                    <div>\n                        <RoverData selectRover={this.state.selectRover}/>\n                    </div>\n                    }\n                </div>\n            </Container>\n    )\n  }\n}\n\nRover.propTypes = {\n  rovers: PropTypes.array\n}\n","import React from 'react'\nimport './css/App.css'\nimport Title from './components/Title'\nimport Rover from './components/Rover'\nimport Container from 'react-bootstrap/Container'\n\nexport default function App () {\n  const name = {\n    title: 'Mars Rover Photos',\n    subtitle: 'Explore the surface of Mars through the eyes of a Rover'\n  }\n  // const rovers = ['Curiosity', 'Opportunity', 'Spirit']\n  return (\n    <Container fluid>\n      <Title title={name.title} subtitle={name.subtitle} />\n      <Rover rovers={['Curiosity', 'Opportunity', 'Spirit']}/>\n    </Container>\n  )\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}