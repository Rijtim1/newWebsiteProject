{"version":3,"sources":["components/Title.js","components/RoverData.js","components/Rover.js","App.js","reportWebVitals.js","index.js"],"names":["Title","Container","fluid","className","this","props","title","subtitle","React","Component","RoverData","state","error","isLoaded","items","url","rover","BASE_URL","fetch","then","res","json","result","setState","photo_manifest","console","log","message","selectRover","Rover","data","roverName","toLowerCase","rovers","map","index","Button","variant","onClick","App","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAKqBA,E,4JACnB,WACE,OACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,YAA3B,SACE,sBAAKA,UAAU,iDAAf,UACE,oBAAIA,UAAW,qBAAf,SAAsCC,KAAKC,MAAMC,QACjD,oBAAIH,UAAW,YAAf,SAA6BC,KAAKC,MAAME,oB,GANfC,IAAMC,WCFpBC,E,kDACnB,WAAaL,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACTC,MAAO,KACPC,UAAU,EACVC,MAAO,IALO,E,qDASlB,WAAsB,IAAD,OAGXC,EAFW,qDAEMX,KAAKC,MAAMW,MAAtBC,oDACZC,MAAMH,GACDI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVV,UAAU,EACVC,MAAOQ,EAAOE,iBAElBC,QAAQC,IAAIJ,EAAOE,mBAEvB,SAACZ,GACG,EAAKW,SAAS,CACVV,UAAU,EACVD,e,oBAMpB,WACI,MAAmCR,KAAKO,MAAhCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,MACzB,OAAIF,EACO,0CAAaA,EAAMe,WAClBd,EAIJ,gCACKY,QAAQC,IAAIZ,GACZV,KAAKC,MAAMuB,eALb,iD,GAtCoBpB,IAAMC,W,QCGxBoB,E,kDACnB,WAAaxB,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACXiB,YAAa,GACbE,KAAM,IAJU,E,2CAQpB,SAASC,GACP3B,KAAKmB,SAAS,CACZK,YAAaG,EAAUC,gBAEzBP,QAAQC,IAAItB,KAAKO,MAAMiB,e,oBAGzB,WAAW,IAAD,OACR,OACQ,cAAC3B,EAAA,EAAD,UACI,qBAAKE,UAAU,wCAAf,SACgC,KAA3BC,KAAKO,MAAMiB,YACZ,gCACI,iDAEQxB,KAAKC,MAAM4B,OAAOC,KAAI,SAAClB,EAAOmB,GAE1B,OACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUlC,UAAU,YAAWmC,QAAS,kBAAM,EAAKA,QAAQtB,IAA3E,SAAoFA,UAOxG,8BACI,cAAC,EAAD,CAAWY,YAAaxB,KAAKO,MAAMiB,wB,GAnCxBpB,IAAMC,WCA1B,SAAS8B,IACtB,IAAMC,EACG,oBADHA,EAEM,0DAGZ,OACE,eAACvC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,cAAC,EAAD,CAAOI,MAAOkC,EAAYjC,SAAUiC,IACpC,cAAC,EAAD,CAAOP,OAAQ,CAAC,YAAa,cAAe,eCflD,IAYeQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.c086579c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/w3.css'\nimport Container from 'react-bootstrap/Container'\n\nexport default class Title extends React.Component {\n  render () {\n    return (\n      <Container fluid className=\"w3-mobile\">\n        <div className='w3-teal w3-center w3-animate-top w3-padding-32'>\n          <h1 className={'w3-center w3-jumbo'}>{this.props.title}</h1>\n          <h2 className={'w3-center'}>{this.props.subtitle}</h2>\n        </div>\n      </Container>\n    )\n  }\n}\n\nTitle.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class RoverData extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n        error: null,\n        isLoaded: false,\n        items: []\n    }\n  }\n\n    componentDidMount () {\n        const BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/manifests/'\n        const API_KEY = 'XAWxBohE3aseeg93CbssMc8e7ckcLD7VvxOKgUBY'\n        const url = BASE_URL + this.props.rover + '?api_key=' + API_KEY\n        fetch(url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result.photo_manifest\n                    })\n                    console.log(result.photo_manifest)\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    })\n                }\n            )\n    }\n\n    render () {\n        const { error, isLoaded, items } = this.state\n        if (error) {\n            return <div>Error: {error.message}</div>\n        } else if (!isLoaded) {\n            return <div>Loading...</div>\n        } else {\n            return (\n                <div>\n                    {console.log(items)}\n                    {this.props.selectRover}\n                </div>\n            )\n        }\n    }\n\n}\n\n\n\n\n\n//   render () {\n//     return (\n//             <div>\n//                 <h3>Rover Data</h3>\n//                 <p>Recieved this from Rover: {this.props.selectRover}</p>\n//             </div>\n//     )\n//   }\n// }\n\nRoverData.propTypes = {\n  roverName: PropTypes.string\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Container from 'react-bootstrap/Container'\nimport RoverData from './RoverData'\nimport Button from 'react-bootstrap/Button'\n\nexport default class Rover extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selectRover: '',\n      data: []\n    }\n  }\n\n  onClick (roverName) {\n    this.setState({\n      selectRover: roverName.toLowerCase()\n    })\n    console.log(this.state.selectRover)\n  }\n\n  render () {\n    return (\n            <Container>\n                <div className=\"w3-center w3-animate-bottom w3-mobile\">\n                    {this.state.selectRover === '' ? \n                    <div>\n                        <h3>Select a Rover </h3>\n                        {\n                                this.props.rovers.map((rover, index) => \n                                {\n                                    return (\n                                        <Button variant=\"primary\" className=\"w3-margin\"onClick={() => this.onClick(rover)}>{rover}</Button>\n                                    )\n                                }\n                            )\n                        }\n                    </div>\n                    : \n                    <div>\n                        <RoverData selectRover={this.state.selectRover}/>\n                    </div>\n                    }\n                </div>\n            </Container>\n    )\n  }\n}\n\nRover.propTypes = {\n  rovers: PropTypes.array\n}\n","import React from 'react'\nimport './css/App.css'\nimport Title from './components/Title'\nimport Rover from './components/Rover'\nimport Container from 'react-bootstrap/Container'\n\nexport default function App () {\n  const name = {\n    title: 'Mars Rover Photos',\n    subtitle: 'Explore the surface of Mars through the eyes of a Rover'\n  }\n  // const rovers = ['Curiosity', 'Opportunity', 'Spirit']\n  return (\n    <Container fluid>\n      <Title title={name.title} subtitle={name.subtitle} />\n      <Rover rovers={['Curiosity', 'Opportunity', 'Spirit']}/>\n    </Container>\n  )\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}