{"version":3,"sources":["components/Title.js","components/RoverDataImage.js","components/RoverData.js","components/Rover.js","App.js","reportWebVitals.js","index.js"],"names":["Title","title","subtitle","Container","fluid","className","RoverDataImage","state","error","isLoaded","photos","handleResetClick","window","location","reload","url","this","props","roverName","solValue","fetch","then","res","json","result","setState","message","length","Carousel","map","photo","index","CarouselItem","href","img_src","target","rel","Image","src","CarouselCaption","earth_date","camera","name","full_name","Alert","variant","Button","onClick","Spinner","animation","role","Component","RoverData","items","value","submitted","handleChange","event","handleSubmit","preventDefault","selectRover","photo_manifest","landing_date","launch_date","status","total_photos","max_date","max_sol","renderManifestInfo","onSubmit","type","onChange","Rover","toLowerCase","data","rovers","rover","renderRoverButtons","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.707933fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Container from 'react-bootstrap/Container';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../css/w3.css';\r\n\r\nfunction Title({ title, subtitle }) {\r\n  return (\r\n    <Container fluid className=\"w3-mobile\">\r\n      <div className=\"w3-teal w3-center w3-animate-top w3-padding-32\">\r\n        <h1 className=\"w3-center w3-jumbo\">{title}</h1>\r\n        <h2 className=\"w3-center\">{subtitle}</h2>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport CarouselItem from 'react-bootstrap/CarouselItem';\r\nimport CarouselCaption from 'react-bootstrap/CarouselCaption';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Button from 'react-bootstrap/Button';\r\nimport '../css/w3.css';\r\nimport '../css/RoverDataImage.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass RoverDataImage extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    photos: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/rovers/';\r\n    const API_KEY = 'XAWxBohE3aseeg93CbssMc8e7ckcLD7VvxOKgUBY';\r\n    const url = `${BASE_URL}${this.props.roverName}/photos?api_key=${API_KEY}&sol=${this.props.solValue}`;\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            photos: result.photos\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  handleResetClick = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  render() {\r\n    const { error, isLoaded, photos } = this.state;\r\n    const { roverName, solValue } = this.props;\r\n\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    }\r\n\r\n    if (!isLoaded) {\r\n      return (\r\n        <div>\r\n          <Spinner animation=\"border\" role=\"status\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {photos.length > 0 ? (\r\n          <div className=\"w3-grey\">\r\n            <Carousel>\r\n              {photos.map((photo, index) => (\r\n                <CarouselItem key={index}>\r\n                  <a href={photo.img_src} target=\"_blank\" rel=\"noreferrer\">\r\n                    <Image className=\"w3-image image-css\" src={photo.img_src} fluid />\r\n                  </a>\r\n                  <CarouselCaption>\r\n                    <div className=\"w3-black\">\r\n                      <h3>{photo.earth_date}</h3>\r\n                      <h4>\r\n                        {`${photo.camera.name} (${photo.camera.full_name})`}\r\n                      </h4>\r\n                    </div>\r\n                  </CarouselCaption>\r\n                </CarouselItem>\r\n              ))}\r\n            </Carousel>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Alert key={solValue} variant=\"info\">\r\n              No photos available for sol {solValue}\r\n            </Alert>\r\n          </div>\r\n        )}\r\n\r\n        <Button\r\n          variant=\"secondary\"\r\n          className=\"w3-margin\"\r\n          onClick={this.handleResetClick}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoverDataImage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RoverDataImage from './RoverDataImage';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/manifests/';\r\nconst API_KEY = 'XAWxBohE3aseeg93CbssMc8e7ckcLD7VvxOKgUBY';\r\n\r\nclass RoverData extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    items: [],\r\n    value: '',\r\n    submitted: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { selectRover } = this.props;\r\n    const url = `${BASE_URL}${selectRover}?api_key=${API_KEY}`;\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.photo_manifest\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ submitted: true });\r\n  };\r\n\r\n  handleResetClick = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  renderManifestInfo() {\r\n    const { items } = this.state;\r\n    return (\r\n      <div>\r\n        <h2>{items.name}</h2>\r\n        <p><strong>Landing Date: </strong>{items.landing_date}</p>\r\n        <p><strong>Launch Date: </strong>{items.launch_date}</p>\r\n        <p><strong>Status: </strong>{items.status}</p>\r\n        <p><strong>Total Photos: </strong>{items.total_photos}</p>\r\n        <p><strong>Max Date: </strong>{items.max_date}</p>\r\n        <p><strong>Max Sol: </strong>{items.max_sol}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, submitted, value } = this.state;\r\n    const { selectRover } = this.props;\r\n\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    }\r\n\r\n    if (!isLoaded) {\r\n      return (\r\n        <div>\r\n          <Spinner animation=\"border\" role=\"status\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"w3-container w3-mobile w3-animate-opacity\">\r\n        {submitted ? null : this.renderManifestInfo()}\r\n\r\n        <div className=\"w3-container w3-mobile w3-margin w3-animate-bottom\">\r\n          {submitted ? (\r\n            <RoverDataImage roverName={selectRover} solValue={value} />\r\n          ) : (\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label>\r\n                Enter Sol:\r\n                <input\r\n                  type=\"number\"\r\n                  value={value}\r\n                  onChange={this.handleChange}\r\n                  name=\"enteredSol\"\r\n                />\r\n              </label>\r\n              <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          )}\r\n        </div>\r\n\r\n        {/* <Button variant=\"secondary\" className=\"w3-margin\" onClick={this.handleResetClick}>\r\n          Reset\r\n        </Button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRoverData.propTypes = {\r\n  selectRover: PropTypes.string\r\n};\r\n\r\nexport default RoverData;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Container from 'react-bootstrap/Container';\r\nimport RoverData from './RoverData';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport default class Rover extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectRover: '',\r\n      data: []\r\n    };\r\n  }\r\n\r\n  onClick = (roverName) => {\r\n    this.setState({\r\n      selectRover: roverName.toLowerCase()\r\n    });\r\n  };\r\n\r\n  renderRoverButtons() {\r\n    return (\r\n      <div>\r\n        <h3 className=\"w3-margin\">Select a Rover</h3>\r\n        {this.props.rovers.map((rover, index) => (\r\n          <Button\r\n            key={index}\r\n            variant=\"primary\"\r\n            className=\"w3-margin\"\r\n            onClick={() => this.onClick(rover)}\r\n          >\r\n            {rover}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { selectRover } = this.state;\r\n    return (\r\n      <Container className=\"\">\r\n        <div className=\"w3-center w3-animate-bottom w3-mobile\">\r\n          {selectRover === '' ? this.renderRoverButtons() : <RoverData selectRover={selectRover} />}\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nRover.propTypes = {\r\n  rovers: PropTypes.array\r\n};\r\n","import React from 'react'\r\nimport './css/App.css'\r\nimport Title from './components/Title'\r\nimport Rover from './components/Rover'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nexport default function App () {\r\n  const name = {\r\n    title: 'Mars Rover Photos',\r\n    subtitle: 'Explore the surface of Mars through the eyes of a Rover'\r\n  }\r\n  // const rovers = ['Curiosity', 'Opportunity', 'Spirit']\r\n  return (\r\n    <Container fluid>\r\n      <Title title={name.title} subtitle={name.subtitle} />\r\n      <Rover rovers={['Curiosity', 'Opportunity', 'Spirit']}/>\r\n    </Container>\r\n  )\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './css/index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}